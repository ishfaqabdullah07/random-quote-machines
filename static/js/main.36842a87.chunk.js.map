{"version":3,"sources":["colorsArray.js","App.js","reportWebVitals.js","index.js"],"names":["colorsArr","quoteDBUrl","App","useState","randomQuote","setRandomQuote","quotesArray","setQuotesArray","accentColor","setAccentColor","fetchQuotes","url","a","fetch","response","json","parsedJSON","parsedArray","quotes","randIndex","Math","floor","random","length","console","log","useEffect","className","style","backgroundColor","id","color","transition","quote","author","href","encodeURI","onClick","randomIndex","colorRandomIndex","newRandomQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAciBA,EAdC,CACd,UACF,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,W,OCREC,EAAa,yIAwDFC,MAtDf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACPC,EADO,KACKC,EADL,OAGwBF,mBAAS,GAHjC,gCAIsBA,mBAAS,KAJ/B,mBAIPG,EAJO,KAIKC,EAJL,OAKsBJ,mBAAS,QAL/B,mBAKPK,EALO,KAKKC,EALL,KAMPC,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGZC,EAAcD,EAAWE,OAC/BX,EAAeU,GACTE,EAAYC,KAAKC,MAAMD,KAAKE,SAASL,EAAYM,QACvDC,QAAQC,IAAIR,EAAYE,IACxBd,EAAeY,EAAYE,IAPT,4CAAH,sDAmBjB,OAVAO,qBAAU,WACThB,EAAYT,KACX,CAACA,IASD,qBAAK0B,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAaC,MAAO,CAACC,gBAAgBrB,GAApD,SAEE,sBAAKsB,GAAG,YAAR,UACI,oBAAGA,GAAG,OAAOF,MAAO,CAACG,MAAMvB,GAA3B,UACA,mBAAGoB,MAAqE,CAACI,WAAW,QAApF,SACE,cAAC,IAAD,MAEF5B,EAAY6B,SAGZ,oBAAGH,GAAG,SAASF,MAAO,CAACG,MAAMvB,GAA7B,eACKJ,EAAY8B,UAEjB,sBAAKP,UAAU,UAAf,UACI,mBAAGG,GAAG,cAAcF,MAAO,CAACC,gBAAgBrB,GAAc2B,KAAMC,UAAU,6CAAD,OAA8ChC,EAAY6B,MAA1D,aAAoE7B,EAAY8B,SAAzJ,SAAoK,cAAC,IAAD,MACpK,wBAAQJ,GAAG,YAAYF,MAAO,CAACC,gBAAgBrB,GAAe6B,QAAS,YAxB/D,WACpB,IAAMC,EAAclB,KAAKC,MAAMD,KAAKE,SAAShB,EAAYiB,QACzDlB,EAAeC,EAAYgC,IAC3B,IAAMC,EAAmBnB,KAAKC,MAAMD,KAAKE,SAAStB,EAAUuB,QAC5Dd,EAAeT,EAAUuC,IAqBXC,IADF,kCCpCDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.36842a87.chunk.js","sourcesContent":["const colorsArr = [\r\n    '#16a085',\r\n  '#27ae60',\r\n  '#2c3e50',\r\n  '#f39c12',\r\n  '#e74c3c',\r\n  '#9b59b6',\r\n  '#FB6964',\r\n  '#342224',\r\n  '#472E32',\r\n  '#BDBB99',\r\n  '#77B1A9',\r\n  '#73A857'\r\n  ];\r\n  export default colorsArr","import React,{useState, useEffect} from 'react';\r\nimport './App.scss';\r\nimport { FaTwitter, FaQuoteLeft } from \"react-icons/fa\";\r\nimport colorsArr from \"./colorsArray\"\r\nlet quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n\r\nfunction App() {\r\n  const[randomQuote,setRandomQuote]=useState(\"\")\r\n  \r\n  const[randomNumber,setRandomNumber]= useState(0)\r\n  const[quotesArray,setQuotesArray]= useState([])\r\n  const[accentColor,setAccentColor]= useState(\"grey\")\r\n  const fetchQuotes = async (url)=>{\r\n    const response = await fetch(url)\r\n    const parsedJSON = await response.json()\r\n    const parsedArray = parsedJSON.quotes\r\n    setQuotesArray(parsedArray)\r\n    const randIndex = Math.floor(Math.random()*parsedArray.length);\r\n    console.log(parsedArray[randIndex])\r\n    setRandomQuote(parsedArray[randIndex]) } \r\n\r\n  useEffect(()=>{\r\n   fetchQuotes(quoteDBUrl)\r\n  },[quoteDBUrl])\r\n  const newRandomQuote =()=>{\r\n    const randomIndex = Math.floor(Math.random()*quotesArray.length)\r\n    setRandomQuote(quotesArray[randomIndex])\r\n    const colorRandomIndex = Math.floor(Math.random()*colorsArr.length)\r\n    setAccentColor(colorsArr[colorRandomIndex])\r\n\r\n  }\r\n  return (\r\n    <div className=\"App\" >\r\n      <div className=\"App-header\" style={{backgroundColor:accentColor}} >\r\n        \r\n        <div id=\"quote-box\" >\r\n            <p id=\"text\" style={{color:accentColor}}>\r\n            <i style={{fontSize:\"1.75rem\"},{marginRight:\"15px\"},{color:accentColor},{transition:\".5ms\"}}>\r\n              <FaQuoteLeft />\r\n            </i>  \r\n           {randomQuote.quote}\r\n\r\n            </p>\r\n            <p id=\"author\" style={{color:accentColor}} >\r\n              - {randomQuote.author}\r\n            </p> \r\n            <div className=\"buttons\">\r\n                <a id=\"tweet-quote\" style={{backgroundColor:accentColor}} href={encodeURI(`http://www.twitter.com/intent/tweet?text= ${randomQuote.quote} -${randomQuote.author}`)}><FaTwitter /></a>\r\n                <button id=\"new-quote\" style={{backgroundColor:accentColor}}  onClick={()=>{\r\n                  newRandomQuote()\r\n                }}>New Quote</button>\r\n            </div>\r\n        \r\n      </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}